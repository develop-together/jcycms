<?php

namespace common\models;

use common\components\TreeHelper;
use common\components\Utils;
use common\models\query\CatalogQuery;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "{{%category}}".
 *
 * @property string $id
 * @property string $parent_id
 * @property string $name
 * @property string $alias
 * @property string $sort
 * @property string $remark
 * @property string $created_at
 * @property string $updated_at
 */
class Category extends \common\components\BaseModel
{

    public $lv = 0;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%category}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name'], 'required'],
            [['id', 'parent_id', 'sort', 'created_at', 'updated_at', 'type'], 'integer'],
            [['name', 'remark'], 'string', 'max' => 255],
            [['path'], 'string', 'max' => 45],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(), [
            'id' => Yii::t('app', 'ID'),
            'parent_id' => Yii::t('app', 'Parent Id'),
            'name' => Yii::t('app', 'Name'),
            'sort' => Yii::t('app', 'Sort'),
            'type' => Yii::t('app', 'Type'),
            'remark' => Yii::t('app', 'Remark'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
        ]);
    }

    public function getNameFormat()
    {
        return $this->parent_id ? str_repeat('　', $this->lv + 1) . '├' . $this->name : $this->name;
    }

    public function getParent()
    {
        return $this->hasOne(self::className(), ['id' => 'parent_id']);
    }

    public function getChildes()
    {
        return $this->hasMany(__CLASS__, ['parent_id' => 'id']);
    }

    public static function findCate($name)
    {
        return self::findOne(['name' => $name]);
    }

    public function beforeSave($insert)
    {
        if (!parent::beforeSave($insert)) {
            return false;
        }

        if ($this->parent_id == NULL || $this->parent_id == '') {
            $this->parent_id = 0;
        }

        if ($this->parent === null) {
            $this->path = $this->id;
        } else {
            $this->path = $this->id . ',' . $this->parent->path;
        }


        return true;
    }

    public function beforeDelete()
    {
        if (count($this->childes)) {
            $this->addError('parent_id', Yii::t('app', 'Allowed not to be deleted, sub level exsited.'));
            return false;
        }

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public static function find()
    {
        return new CatalogQuery(__CLASS__); // TODO: Change the autogenerated stub
    }

    public static function loadData()
    {
        return self::find()->article()->asArray()->all();
    }

    public static function loadDataTree()
    {
        return Utils::reference_delivery_tree(static::loadData(), 'id', 'parent_id');
    }

    public static function loadOptions($level = null)
    {
        $models = static::loadData($level);
        return ArrayHelper::map($models, 'id', 'name');
    }


    protected function childesToObject($object, $parent_id, $lv = 0)
    {
        $tree = new TreeHelper($object, true, 3, [
            'fpid' => $parent_id,
            'root' => $lv
        ]);

        return $tree->getTree();
    }
}
