<?php

namespace common\models;

use common\components\Utils;
use Yii;
use yii\base\Exception;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "{{%mall_brand}}".
 *
 * @property integer $id
 * @property string $name
 * @property string $brand_code
 * @property string $image
 * @property string $letter
 * @property integer $sort
 * @property integer $created_at
 * @property integer $updated_at
 */
class MallBrand extends \common\components\BaseModel
{

    public $cateGoryBrandList = [];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%mall_brand}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'brand_code'], 'required'],
            [['sort', 'created_at', 'updated_at'], 'integer'],
            [['name'], 'string', 'max' => 45],
            [['brand_code'], 'string', 'max' => 16],
            [['image', 'cateGoryBrandList'], 'safe'],
            [['letter'], 'string', 'max' => 1],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(), [
            'id' => 'ID',
            'name' => Yii::t('common', 'Brand Name'),
            'cateGoryBrandList' => Yii::t('mall', 'Category'),
            'brand_code' => Yii::t('common', 'Brand Code'),
            'image' => Yii::t('app', 'Image'),
            'letter' => Yii::t('common', 'Letter'),
            'sort' => Yii::t('common', 'Sort'),
        ]);
    }

    public function getCategoryBrands()
    {
        return $this->hasMany(MallCategoryBrand::class, ['brand_id' => 'id']);
    }

    public function beforeSave($insert)
    {
        $this->letter = Utils::letterWord($this->name);
        $this->image = $this->uploadOperate('image', '@mallFile/', 'image');
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function submitData($params)
    {
        $db = self::getDb();
        $transaction = $db->beginTransaction();
        if (!$this->load($params)) {
            return false;
        }

        try {
            if (!$this->save()) {
                throw new Exception("save brand error");
            }
            $oldCateGoryBrandList = ArrayHelper::getColumn(ArrayHelper::toArray($this->categoryBrands), 'category_id');
            $needRemoves = array_diff($oldCateGoryBrandList, $this->cateGoryBrandList);
            $needAdds = array_diff($this->cateGoryBrandList, $oldCateGoryBrandList);
            MallCategoryBrand::addDataByBrand($this->id, $needAdds, $needRemoves);
            $transaction->commit();
        } catch (Exception $e) {
            $transaction->rollBack();
            return false;
        }

        return true;

    }

    public function afterFind()
    {
        if (!$this->cateGoryBrandList && $this->categoryBrands) {
            $this->cateGoryBrandList = ArrayHelper::getColumn(ArrayHelper::toArray($this->categoryBrands), 'category_id');
        }

        parent::afterFind(); // TODO: Change the autogenerated stub
    }
}
